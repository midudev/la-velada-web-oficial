---
import { FIGHTERS, MATCHUPS } from '@/consts/fighters'
import BoxerCard from './BoxerCard.astro'

const firstRow = FIGHTERS.slice(0, 6)
const leftRow = firstRow.slice(0, 3)
const rightRow = firstRow.slice(3)

const secondRow = FIGHTERS.slice(6)
<<<<<<< HEAD

const visibleFighters = FIGHTERS;

const opponentMap = new Map()
MATCHUPS.forEach(matchup => {
  opponentMap.set(matchup.fighter1, matchup.fighter2)
  opponentMap.set(matchup.fighter2, matchup.fighter1)
})
=======
const leftSecondRow = secondRow.slice(0, 4)
const rightSecondRow = secondRow.slice(4, 8)

const animationDelay = [500, 700, 800]
const reverseDelay = [...animationDelay].reverse()

const animationDelaySecondRow = [...animationDelay, 900]
const reverseDelaySecondRow = [...animationDelaySecondRow].reverse()
>>>>>>> upstream/main
---

<section class="relative flex min-h-screen w-full">
  <div
    class="mask-fade-bottom animate-fade-in absolute inset-0 w-full bg-[url('/images/hero.avif')] bg-cover bg-center duration-75"
  >
  </div>

  <div class="mask-fade-bottom absolute inset-0 w-full bg-black opacity-10"></div>

  <div class="relative flex w-full flex-col items-center p-8 text-center">
    <div id="landing" class="absolute top-0 flex w-full flex-col items-center py-16">
      <h3
        class="text-theme-seashell animate-fade-in animate-delay-300 tracking mt-4 leading-[100%] font-medium"
      >
        26 DE <br />JULIO
      </h3>
      <figure class="animate-fade-in relative">
        <img
          class="relative z-20 h-auto w-64 sm:w-72 md:w-80 lg:w-96"
          src="/images/logo.png"
          fetchpriority="high"
          alt="La Velada del AÃ±o V"
          decoding="async"
        />
        <div class="absolute top-0 z-0 size-64 bg-pink-400/80 blur-2xl"></div>
      </figure>

      <div class="relative z-50">
        <h3
          class="text-theme-seashell animate-fade-in animate-delay-500 z-0 mt-4 leading-relaxed font-medium tracking-wider uppercase"
        >
          Estadio<br />La Cartuja,<br />Sevilla
        </h3>
        <div class="absolute -inset-2 -z-10 h-full w-full bg-pink-400/80 blur-2xl"></div>
        <a
          href="https://twitch.tv/ibai"
          rel="noopener noreferrer"
          target="_blank"
          class="animate-fade-in animate-delay-700 z-50 mt-4 inline-block leading-relaxed font-medium tracking-wider uppercase transition hover:scale-125"
        >
          twitch.tv<br />Ibai
        </a>
      </div>
    </div>

    <div
      id="fighter-container"
      class="pointer-events-none absolute inset-0 flex flex-col items-center"
    >
      <div class="relative top-96 z-1 mx-auto flex h-[4.5rem] w-full items-center justify-center">
        {
          FIGHTERS.map(({ id, name }) => (
            <img
              transition:name={`text-${id}`}
              data-id={`hero-text-${id}`}
              src={`/images/fighters/text/${id}.webp`}
              alt={name}
              decoding="async"
              class="mask-fade-text absolute hidden h-full w-auto"
              fetchpriority="low"
            />
          ))
        }
      </div>

      <div
        class="mask-fade-bottom relative bottom-0 mx-auto flex h-[80vh] w-full items-center justify-center"
      >
        {
          FIGHTERS.map(({ id, name }) => (
            <img
              transition:name={`image-${id}`}
              data-id={`hero-image-${id}`}
              src={`/images/fighters/big/${id}.webp`}
              alt={name}
              decoding="async"
              class="absolute hidden h-full w-auto object-cover lg:object-contain"
              fetchpriority="low"
            />
          ))
        }
      </div>
    </div>

<<<<<<< HEAD
    <div class="mobile-fighters md:hidden fixed bottom-0 left-0 right-0 w-full pb-8 pt-4 bg-gradient-to-t from-black/80 to-transparent">
      <div class="mobile-carousel-container">
        <div class="mobile-carousel" id="mobile-carousel">
          {visibleFighters.map(({ id, name }) => (
            <a class="mobile-fighter-card" data-id={id} href={`/luchador/${id}`}>
              <div class="mobile-card-inner">
                <img src={`/images/fighters/cards/${id}.png`} alt={name} class="mobile-fighter-img" />
                <div class="mobile-card-overlay">
                  <h3 class="mobile-fighter-name">{name}</h3>
                </div>
              </div>
            </a>
          ))}
=======
    <div class="relative flex h-full w-full max-w-6xl flex-col items-center justify-end gap-8 p-8">
      <div class="flex w-full flex-wrap justify-between px-4">
        <div class="flex flex-wrap justify-start gap-4">
          {
            leftRow.map(({ id, name }, index) => (
              <div
                class={`animate-fade-in-right animate-duration-slower animate-delay-${animationDelay[index]}`}
              >
                <BoxerCard id={id} name={name} class="boxer-left" />
              </div>
            ))
          }
        </div>

        <div class="flex flex-wrap justify-end gap-4">
          {
            rightRow.map(({ id, name }, index) => (
              <div
                class={`animate-fade-in-left animate-duration-slower animate-delay-${reverseDelay[index]}`}
              >
                <BoxerCard id={id} name={name} class="boxer-right" />
              </div>
            ))
          }
>>>>>>> upstream/main
        </div>
      </div>
    </div>

<<<<<<< HEAD
    <div class="desktop-fighters hidden md:flex relative h-full w-full max-w-6xl flex-col items-center justify-end gap-4 p-8">
      <div class="flex w-full flex-wrap justify-between px-4">
        <div class="animate-fade-in-right animate-delay-500 flex flex-wrap justify-start gap-4">
          {leftRow.map(({ id, name }) => (
            <div class="boxer-card-wrapper" data-fighter-id={id} data-opponent-id={opponentMap.get(id)}>
              <BoxerCard id={id} name={name} />
            </div>
          ))}
        </div>
        <div class="animate-fade-in-left animate-delay-500 flex flex-wrap justify-end gap-4">
          {rightRow.map(({ id, name }) => (
            <div class="boxer-card-wrapper" data-fighter-id={id} data-opponent-id={opponentMap.get(id)}>
              <BoxerCard id={id} name={name} />
            </div>
          ))}
        </div>
      </div>
      <div class="animate-fade-in-up animate-delay-700 flex flex-wrap justify-between gap-4 px-4">
        {secondRow.map(({ id, name }) => (
          <div class="boxer-card-wrapper" data-fighter-id={id} data-opponent-id={opponentMap.get(id)}>
            <BoxerCard id={id} name={name} />
          </div>
        ))}
=======
      <div class="flex flex-wrap justify-between gap-4">
        <div class="flex flex-wrap justify-start gap-4">
          {
            leftSecondRow.map(({ id, name }, index) => (
              <div class={`animate-fade-in-up animate-delay-${animationDelaySecondRow[index]}`}>
                <BoxerCard id={id} name={name} class="boxer-left" />
              </div>
            ))
          }
        </div>
        <div class="flex flex-wrap justify-end gap-4">
          {
            rightSecondRow.map(({ id, name }, index) => (
              <div class={`animate-fade-in-up animate-delay-${reverseDelaySecondRow[index]}`}>
                <BoxerCard id={id} name={name} class="boxer-right" />
              </div>
            ))
          }
        </div>
>>>>>>> upstream/main
      </div>
    </div>
  </div>
</section>

<style>
  .mask-fade-text {
    mask-image: linear-gradient(to bottom, transparent 5%, black 6%, black 95%, transparent 100%);
  }
  .mask-fade-bottom {
    mask-image: linear-gradient(to bottom, rgba(0,0,0,1) 70%, rgba(0,0,0,0) 100%);
  }

  .mobile-carousel-container {
    position: absolute;
    bottom: 4rem;
    left: 50%;
    transform: translateX(-50%);
    width: 100%;
    height: 14rem;
    perspective: 2000px;
    z-index: 10;
    display: flex;
    justify-content: center;
    overflow: hidden;
  }
  .mobile-carousel {
    position: relative;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
  }
  .mobile-fighter-card {
    position: absolute;
    width: 7rem;
    height: 10rem;
    transform-origin: center;
    transition: all 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
    cursor: pointer;
    z-index: 1;
    text-decoration: none;
    backface-visibility: hidden;
    transform-style: preserve-3d;
  }
  .mobile-card-inner {
    width: 100%;
    height: 100%;
    position: relative;
    border-radius: 0.75rem;
    overflow: hidden;
    box-shadow: 0 10px 25px rgba(0,0,0,0.5);
    border: 2px solid rgba(255, 105, 180, 0.5);
    background: linear-gradient(145deg, rgba(255,105,180,0.4) 0%, rgba(0,255,255,0.4) 100%);
    transition: all 0.3s ease;
    transform-style: preserve-3d;
  }
  .mobile-fighter-card.active .mobile-card-inner {
    border: 2px solid rgba(255, 255, 255, 0.8);
    box-shadow: 0 0 20px rgba(255,105,180,0.7);
    transform: scale(1.05);
  }
  .mobile-fighter-img {
    aspect-ratio: 900/1200;
    height: 100%;
    width: 100%;
    object-fit: cover;
    object-position: top;
    transition: transform 0.3s ease-in-out;
  }
  .mobile-fighter-card.active .mobile-fighter-img {
    transform: scale(1.1);
  }
  .mobile-card-overlay {
    position: absolute;
    inset: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-end;
    background: linear-gradient(to top, rgba(157, 23, 77, 0.9), transparent);
    opacity: 0;
    transition: opacity 0.3s ease;
    padding: 0.5rem;
  }
  .mobile-fighter-card.active .mobile-card-overlay {
    opacity: 1;
  }
  .mobile-fighter-name {
    color: #FFB6C1;
    font-size: 0.9rem;
    font-weight: 700;
    text-shadow: 0 0 10px rgba(0,0,0,0.8);
    text-align: center;
  }

  .mobile-carousel-container::after {
    content: '';
    position: absolute;
    bottom: -1rem;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 4px;
    background: linear-gradient(90deg, transparent, rgba(255,105,180,0.7), transparent);
    border-radius: 2px;
    animation: pulse 2s infinite;
  }
  @keyframes pulse {
    0% { opacity: 0.5; width: 80px; }
    50% { opacity: 1; width: 100px; }
    100% { opacity: 0.5; width: 80px; }
  }

  .boxer-card-wrapper {
    position: relative;
    transition: all 0.3s ease;
    margin: 0;
  }
  .boxer-card-wrapper.highlight {
    transform: scale(1.05);
    z-index: 2;
    filter: brightness(1.2);
  }
  .boxer-card-wrapper.highlight-opponent {
    filter: brightness(1.1) contrast(1.1);
    z-index: 1;
  }
  .boxer-card-wrapper.desaturate {
    filter: grayscale(0.7) brightness(0.7);
    opacity: 0.7;
    transform: scale(0.95);
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const $landing = document.querySelector('#landing');
    const isMobile = window.matchMedia('(max-width: 768px)').matches;

<<<<<<< HEAD
    let currentFighterId = null;

    function resetView() {
      $landing?.classList.remove('hidden');
      document.querySelectorAll('[data-id^="hero-text-"], [data-id^="hero-image-"]').forEach(el => {
        el.classList.add('hidden');
        el.classList.remove('animate-zoom-in', 'animate-slide-up-fade');
      });
      if (!isMobile) {
        document.querySelectorAll('.boxer-card-wrapper').forEach(wrapper => {
          wrapper.classList.remove('highlight', 'highlight-opponent', 'desaturate');
        });
      }
      currentFighterId = null;
    }

    function showFighter(id) {
      if (currentFighterId === id) return;

      if (currentFighterId) {
        document.querySelector(`[data-id="hero-text-${currentFighterId}"]`)?.classList.add('hidden');
        document.querySelector(`[data-id="hero-image-${currentFighterId}"]`)?.classList.add('hidden');
        document.querySelector(`[data-id="hero-text-${currentFighterId}"]`)?.classList.remove('animate-zoom-in');
        document.querySelector(`[data-id="hero-image-${currentFighterId}"]`)?.classList.remove('animate-slide-up-fade');
      }

      $landing?.classList.add('hidden');
      document.querySelector(`[data-id="hero-text-${id}"]`)?.classList.remove('hidden');
      document.querySelector(`[data-id="hero-image-${id}"]`)?.classList.remove('hidden');
      document.querySelector(`[data-id="hero-text-${id}"]`)?.classList.add('animate-zoom-in');
      document.querySelector(`[data-id="hero-image-${id}"]`)?.classList.add('animate-slide-up-fade');

      if (!isMobile) {
        document.querySelectorAll('.boxer-card-wrapper').forEach(wrapper => {
          wrapper.classList.add('desaturate');
          wrapper.classList.remove('highlight', 'highlight-opponent');
        });

        const selectedWrapper = document.querySelector(`.boxer-card-wrapper[data-fighter-id="${id}"]`);
        if (selectedWrapper) {
          selectedWrapper.classList.remove('desaturate');
          selectedWrapper.classList.add('highlight');

          const opponentId = selectedWrapper.getAttribute('data-opponent-id');
          if (opponentId) {
            const opponentWrapper = document.querySelector(`.boxer-card-wrapper[data-fighter-id="${opponentId}"]`);
            if (opponentWrapper) {
              opponentWrapper.classList.remove('desaturate');
              opponentWrapper.classList.add('highlight-opponent');
            }
          }
        }
      }

      currentFighterId = id;
    }

    document.addEventListener('boxer-card-hovered', (event) => {
      const customEvent = event;
      const id = customEvent.detail.id;
      showFighter(id);
    });
=======
    let currentFighterId: string | null = null
    let hideFighterTimer: ReturnType<typeof setTimeout>;
>>>>>>> upstream/main

    document.addEventListener('boxer-card-exit', () => {
      resetView();
    });

<<<<<<< HEAD
    if (isMobile) {
      const $carousel = document.querySelector('#mobile-carousel');
      const $carouselContainer = document.querySelector('.mobile-carousel-container');
      const fighterCards = Array.from(document.querySelectorAll('.mobile-fighter-card'));

      let currentFighterId = null;
      let autoRotateInterval = null;
      let isDragging = false;
      let startX = 0;
      let currentX = 0;
      let rotationAngle = 0;
      let lastTouchTime = 0;
      let touchVelocity = 0;
      let lastUpdateTime = 0;
      
      const totalCards = fighterCards.length;
      const cardAngle = 360 / totalCards;
      const radius = 300;
      const visibleCardCount = 7;

      fighterCards.forEach(card => {
        card.style.visibility = 'visible';
        card.style.opacity = '0';
      });

      function normalizeAngle(angle) {
        return ((angle % 360) + 360) % 360;
=======
      if (!currentFighterId) return

      const heroText = document.querySelector(`[data-id="hero-text-${currentFighterId}"]`)
      const heroImage = document.querySelector(`[data-id="hero-image-${currentFighterId}"]`)

      if (heroText && heroImage) {
        heroText.classList.remove('animate-zoom-int')
        heroImage.classList.remove('animate-slide-up-fade')

        heroText.classList.add('animate-zoom-out')
        heroImage.classList.add('animate-fade-out-down')

        hideFighterTimer = setTimeout(() => {
          heroText.classList.add('hidden')
          heroImage.classList.add('hidden')
          currentFighterId = null
        }, 500)
      }
    })

    document.addEventListener('boxer-card-hovered', (event: Event) => {
      if (currentFighterId) {
        clearTimeout(hideFighterTimer)
        const heroText = document.querySelector(`[data-id="hero-text-${currentFighterId}"]`)
        const heroImage = document.querySelector(`[data-id="hero-image-${currentFighterId}"]`)
        heroText?.classList.add('hidden')
        heroImage?.classList.add('hidden')
        currentFighterId = null
      }

      const customEvent = event as CustomEvent<{ id: string }>
      const id = customEvent.detail.id

      const heroText = document.querySelector(`[data-id="hero-text-${id}"]`)
      const heroImage = document.querySelector(`[data-id="hero-image-${id}"]`)

      if (heroText && heroImage) {
        heroText.classList.remove('animate-zoom-out')
        heroImage.classList.remove('animate-fade-out-down')
      }

      // si el luchador que entras es el mismo que ya se muestra
      // entonces no hacemos nada
      if (currentFighterId === id) return

      // si ya estamos mostrando un luchador, tenemos que ocultarlo
      if (currentFighterId) {
        const currentHeroText = document.querySelector(`[data-id="hero-text-${currentFighterId}"]`)
        const currentHeroImage = document.querySelector(
          `[data-id="hero-image-${currentFighterId}"]`
        )

        if (currentHeroText && currentHeroImage) {
          currentHeroText.classList.add('hidden')
          currentHeroImage.classList.add('hidden')
          currentHeroText.classList.remove('animate-zoom-in')
          currentHeroImage.classList.remove('animate-slide-up-fade')
        }
>>>>>>> upstream/main
      }

      function getCardIndexAtAngle(angle) {
        angle = normalizeAngle(angle);
        return Math.round(angle / cardAngle) % totalCards;
      }

<<<<<<< HEAD
      function positionAllCards(smooth = true) {
        const normalizedRotation = normalizeAngle(rotationAngle);
        const centralAngle = normalizedRotation;
        const halfVisible = (visibleCardCount / 2) * cardAngle;
        
        const now = performance.now();
        if (smooth && now - lastUpdateTime < 16) return;
        lastUpdateTime = now;

        fighterCards.forEach((card, index) => {
          const cardOffset = index * cardAngle;
          let relativeAngle = normalizeAngle(cardOffset - centralAngle);
          if (relativeAngle > 180) relativeAngle -= 360;
          
          const isVisible = Math.abs(relativeAngle) <= halfVisible;
          if (!isVisible) {
            card.style.opacity = '0';
            card.style.visibility = 'hidden';
            card.style.pointerEvents = 'none';
            return;
          }
          
          card.style.visibility = 'visible';
          card.style.pointerEvents = 'auto';
          
          const angleRad = relativeAngle * (Math.PI / 180);
          const x = Math.sin(angleRad) * radius;
          const y = Math.abs(relativeAngle) > 90 ? Math.abs(relativeAngle - 180) * 0.1 - 10 : 0;
          const z = Math.cos(angleRad) * radius - radius;
          const frontness = Math.cos(angleRad);
          
          let opacity;
          if (frontness > 0.7) {
            opacity = 1;
          } else if (frontness > 0) {
            opacity = 0.4 + frontness * 0.6;
          } else {
            opacity = Math.max(0, 0.2 + frontness * 0.2);
          }
          
          const scale = 0.6 + frontness * 0.3;
          card.style.transform = `translateX(${x}px) translateY(${y}px) translateZ(${z}px) rotateY(${-relativeAngle}deg) scale(${scale})`;
          card.style.opacity = opacity;
          
          if (Math.abs(relativeAngle) < cardAngle / 2) {
            card.classList.add('active');
            const id = card.getAttribute('data-id');
            if (id && id !== currentFighterId) {
              showFighter(id);
              currentFighterId = id;
            }
          } else {
            card.classList.remove('active');
          }
        });
      }

      positionAllCards(false);

      function startAutoRotate() {
        if (autoRotateInterval) clearInterval(autoRotateInterval);
        autoRotateInterval = setInterval(() => {
          if (!isDragging) {
            rotationAngle += 0.15;
            requestAnimationFrame(() => positionAllCards());
          }
        }, 16);
      }
=======
      // mostramos el luchador que quiere ver el usuario
      heroText?.classList.remove('hidden')
      heroText?.classList.add('animate-zoom-in')
      heroImage?.classList.remove('hidden')
      heroImage?.classList.add('animate-slide-up-fade')
>>>>>>> upstream/main

      setTimeout(startAutoRotate, 2000);

      $carouselContainer.addEventListener('touchstart', (e) => {
        if (autoRotateInterval) clearInterval(autoRotateInterval);
        isDragging = true;
        startX = e.touches[0].clientX;
        currentX = startX;
        lastTouchTime = Date.now();
        touchVelocity = 0;
        e.preventDefault();
      }, { passive: false });

      $carouselContainer.addEventListener('touchmove', (e) => {
        if (!isDragging) return;
        
        const currentTouch = e.touches[0].clientX;
        const diffX = currentTouch - currentX;
        const now = Date.now();
        const dt = now - lastTouchTime;
        
        if (dt > 0) {
          touchVelocity = touchVelocity * 0.7 + (diffX / dt * 13) * 0.3;
        }
        
        const sensitivity = 40 + Math.abs(diffX) * 0.1;
        rotationAngle += (diffX / sensitivity);
        currentX = currentTouch;
        lastTouchTime = now;
        
        requestAnimationFrame(() => positionAllCards());
        e.preventDefault();
      }, { passive: false });

      $carouselContainer.addEventListener('touchend', () => {
        isDragging = false;
        
        let inertia = touchVelocity;
        let lastFrame = performance.now();
        
        function applyInertia(timestamp) {
          const deltaTime = timestamp - lastFrame;
          lastFrame = timestamp;
          
          const timeScale = deltaTime / 16;
          
          if (Math.abs(inertia) > 0.1) {
            rotationAngle += inertia * timeScale;
            const friction = 0.92 + Math.min(0.05, Math.abs(inertia) * 0.001);
            inertia *= Math.pow(friction, timeScale);
            positionAllCards();
            requestAnimationFrame(applyInertia);
          } else {
            const currentIndex = getCardIndexAtAngle(rotationAngle);
            const targetAngle = currentIndex * cardAngle;
            let angleDiff = normalizeAngle(targetAngle) - normalizeAngle(rotationAngle);
            if (angleDiff > 180) angleDiff -= 360;
            if (angleDiff < -180) angleDiff += 360;
            
            if (Math.abs(angleDiff) < cardAngle * 0.4) {
              const startAngle = rotationAngle;
              const startTime = performance.now();
              const snapDuration = 300;
              
              function animateSnap(time) {
                const elapsed = time - startTime;
                if (elapsed < snapDuration) {
                  const progress = 1 - Math.pow(1 - elapsed / snapDuration, 2);
                  rotationAngle = startAngle + (angleDiff * progress);
                  positionAllCards();
                  requestAnimationFrame(animateSnap);
                } else {
                  rotationAngle = startAngle + angleDiff;
                  positionAllCards();
                  startAutoRotate();
                }
              }
              requestAnimationFrame(animateSnap);
            } else {
              startAutoRotate();
            }
          }
        }
        requestAnimationFrame(applyInertia);
      });

      fighterCards.forEach((card) => {
        card.addEventListener('click', (e) => {
          const id = card.getAttribute('data-id');
          if (id) {
            if (card.classList.contains('active')) {
              window.location.href = `/luchador/${id}`;
            } else {
              const cardIndex = fighterCards.indexOf(card);
              const targetAngle = cardIndex * cardAngle;
              let currentNormalizedAngle = normalizeAngle(rotationAngle);
              let targetNormalizedAngle = normalizeAngle(targetAngle);
              let angleDiff = targetNormalizedAngle - currentNormalizedAngle;
              if (angleDiff > 180) angleDiff -= 360;
              if (angleDiff < -180) angleDiff += 360;
              clearInterval(autoRotateInterval);
              const startAngle = rotationAngle;
              const startTime = performance.now();
              const duration = 500 + Math.min(500, Math.abs(angleDiff) * 1.2);
              
              function animateRotation(timestamp) {
                const elapsed = timestamp - startTime;
                if (elapsed < duration) {
                  const progress = 1 - Math.pow(1 - elapsed / duration, 3);
                  rotationAngle = startAngle + (angleDiff * progress);
                  positionAllCards();
                  requestAnimationFrame(animateRotation);
                } else {
                  rotationAngle = startAngle + angleDiff;
                  positionAllCards();
                  startAutoRotate();
                }
              }
              requestAnimationFrame(animateRotation);
              e.preventDefault();
            }
          }
        });
      });
    }
  });
</script>