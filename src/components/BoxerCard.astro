---
const { id, name, class: extraClass } = Astro.props

interface Props {
  id: string
  name: string
  class: string
}
---

<a
  class={`boxer-card ${extraClass} inline-block transition-all w-10 sm:w-14 md:w-16 lg:w-24 xl:w-26 group relative rounded-lg duration-300 hover:scale-110 hover:shadow-lg hover:z-20`}
  href={`/luchador/${id}`}
  data-id={id}
>
  <div class="relative overflow-hidden rounded-lg">
    <div 
      class="fighter-sprite aspect-[900/1200] h-full w-full transition-transform duration-500 group-hover:scale-110"
      data-fighter={id}
      role="img"
      aria-label={`Tarjeta del boxeador ${name}`}
    >
    </div>
  </div>
</a>
    <div
      class="absolute inset-0 -translate-x-full bg-gradient-to-tr from-transparent via-white/20 to-transparent transition-transform duration-700 ease-in-out group-hover:translate-x-full"
    >
    </div>

    <div
      class="border-theme-tickle-me-pink/70 absolute inset-0 rounded-lg border-0 opacity-0 transition-all duration-300 group-hover:border-2 group-hover:opacity-100"
    >
    </div>
  </div>

  <div
    class="absolute inset-0 flex translate-y-2 flex-col items-center justify-end rounded-lg bg-gradient-to-t from-pink-950/90 via-pink-950/40 to-transparent p-2 opacity-0 transition-all duration-300 group-hover:translate-y-0 group-hover:opacity-100"
  >
    <h3
      class="text-theme-tickle-me-pink text-xs font-semibold tracking-wide uppercase drop-shadow-[0_1px_2px_rgba(0,0,0,0.8)]"
    >
      {name}
    </h3>
  </div>

  <div
    class="bg-theme-tickle-me-pink absolute -bottom-1 left-1/2 h-1 w-0 -translate-x-1/2 transform rounded-t-md transition-all duration-300 group-hover:w-2/3"
  >
  </div>
</a>

<style>
  .boxer-left {
    /* clip-path: polygon(0% 0%, 95% 0%, 100% 100%, 5% 100%); */
    transform: skew(2deg);
  }

  .boxer-right {
    /* clip-path: polygon(5% 0%, 100% 0%, 95% 100%, 0% 100%); */
    transform: skew(-2deg);
  }
  
  /* Técnica CSS Sprite: Una sola imagen con todas las tarjetas de luchadores */
  .fighter-sprite {
    background-image: url('/images/fighters/cards/fighters-sheet.webp');
    background-repeat: no-repeat;
    background-size: 1400% 100%; /* 14 imágenes en una fila */
    position: relative;
    background-position: calc(var(--fighter-index, 0) / 13 * 100%) 0;
  }

  /* Lista ordenada de luchadores para calcular índices automáticamente */
  .fighter-sprite[data-fighter="abby"] { --fighter-index: 0; }
  .fighter-sprite[data-fighter="alana"] { --fighter-index: 1; }
  .fighter-sprite[data-fighter="andoni"] { --fighter-index: 2; }
  .fighter-sprite[data-fighter="arigeli"] { --fighter-index: 3; }
  .fighter-sprite[data-fighter="carlos"] { --fighter-index: 4; }
  .fighter-sprite[data-fighter="gaspi"] { --fighter-index: 5; }
  .fighter-sprite[data-fighter="grefg"] { --fighter-index: 6; }
  .fighter-sprite[data-fighter="peereira"] { --fighter-index: 7; }
  .fighter-sprite[data-fighter="perxitaa"] { --fighter-index: 8; }
  .fighter-sprite[data-fighter="rivaldios"] { --fighter-index: 9; }
  .fighter-sprite[data-fighter="roro"] { --fighter-index: 10; }
  .fighter-sprite[data-fighter="tomas"] { --fighter-index: 11; }
  .fighter-sprite[data-fighter="viruzz"] { --fighter-index: 12; }
  .fighter-sprite[data-fighter="westcol"] { --fighter-index: 13; }

  /* Accesibilidad: Respetar preferencias de reducción de movimiento */
  @media (prefers-reduced-motion) {
    .boxer-card,
    .boxer-card:hover,
    .boxer-card img,
    .boxer-card div {
      transition: opacity 0.3s ease !important;
      transform: none !important;
    }
  }

  @keyframes pulseBorder {
    0% { box-shadow: 0 0 0 0 rgba(255, 20, 147, 0.7); }
    70% { box-shadow: 0 0 0 10px rgba(255, 20, 147, 0); }
    100% { box-shadow: 0 0 0 0 rgba(255, 20, 147, 0); }
  }

  @keyframes selectedPulse {
    0% {
      box-shadow: 0 0 0 0 rgba(255, 20, 147, 0.7),
                  inset 0 0 0 2px rgba(255, 20, 147, 1);
    }
    70% {
      box-shadow: 0 0 0 15px rgba(255, 20, 147, 0),
                  inset 0 0 0 2px rgba(255, 20, 147, 1);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(255, 20, 147, 0),
                  inset 0 0 0 2px rgba(255, 20, 147, 1);
    }
  }

  .boxer-card.selected {
    animation: selectedPulse 2s infinite cubic-bezier(0.66, 0, 0, 1);
  }

  @media (prefers-reduced-motion) {
    .boxer-card.selected {
      animation: none;
      box-shadow: inset 0 0 0 2px rgba(255, 20, 147, 1);
    }
  }
</style>

<script>
  import { FIGHTERS } from '@/consts/fighters'
  type Fighter = typeof FIGHTERS[number]
  type FighterId = Fighter['id']

  // Constantes de configuración para facilitar ajustes
  const HOVER_EXIT_DELAY = 500;
  const NAVIGATION_DELAY = 600;
  const PARTICLE_COUNT = 10;
  const PARTICLE_ANIMATION_DURATION = 1000;
  const PARTICLE_BASE_RADIUS = 50;
  const PARTICLE_RADIUS_VARIANCE = 20;

  document.addEventListener('astro:page-load', () => {
    // Optimización: Cacheamos elementos DOM y creamos mapa de luchadores
    const container = document.getElementById('boxer-cards-container') || document;
    const boxerCards = document.querySelectorAll('.boxer-card');
    let timeoutId: ReturnType<typeof setTimeout> | null = null;
    const fightersMap = new Map(FIGHTERS.map(f => [f.id, f]));

    // Delegación de eventos: Un solo manejador para todos los tipos de interacción
    const handleInteraction = (e: Event) => {
      const card = (e.target as HTMLElement).closest('.boxer-card');
      if (!card) return;

      const type = e.type;
      if ((type === 'mouseout' || type === 'focusout') && 
          card.contains((e as MouseEvent | FocusEvent).relatedTarget as Node)) return;

      const isActive = ['mouseover', 'focusin', 'click'].includes(type);
      timeoutId && clearTimeout(timeoutId);

      if (!isActive) {
        timeoutId = setTimeout(() => document.dispatchEvent(new CustomEvent('boxer-card-exit')), HOVER_EXIT_DELAY);
        boxerCards.forEach(c => c.classList.remove('grayscale-100'));
        return;
      }

      const id = card.getAttribute('data-id') as FighterId;
      if (!id) return;

      if (type === 'click') {
        e.preventDefault();
        boxerCards.forEach(c => c.classList.remove('selected'));
        card.classList.add('selected');
        const href = card.getAttribute('href');
        href && setTimeout(() => window.location.href = href, NAVIGATION_DELAY);
      } else {
        document.dispatchEvent(new CustomEvent('boxer-card-hovered', { detail: { id } }));
        const versusId = fightersMap.get(id)?.versus;
        boxerCards.forEach(c => 
          c.classList.toggle('grayscale-100', c.getAttribute('data-id') !== id && c.getAttribute('data-id') !== versusId),
      );
      }
      
      createParticles(card as HTMLElement);
    };

    // Registramos un solo listener por tipo de evento en lugar de uno por cada tarjeta
    ['mouseover', 'mouseout', 'focusin', 'focusout', 'click'].forEach(event => 
      container.addEventListener(event, handleInteraction),
  );

    // Sistema de partículas optimizado con DocumentFragment
    function createParticles(element: HTMLElement) {
      const fragment = document.createDocumentFragment();
      const baseParticle = document.createElement('div');
      baseParticle.className = 'absolute w-1 h-1 bg-theme-tickle-me-pink rounded-full';
      
      const animationOptions = {
        duration: PARTICLE_ANIMATION_DURATION,
        fill: 'forwards' as FillMode,
      };

      // Creamos partículas en un patrón circular usando trigonometría
      Array.from({ length: PARTICLE_COUNT }).forEach(() => {
        const particle = baseParticle.cloneNode() as HTMLElement;
        const angle = Math.random() * Math.PI * 2;
        const radius = PARTICLE_BASE_RADIUS + Math.random() * PARTICLE_RADIUS_VARIANCE;
        
        particle.style.cssText = `
          left: ${50 + Math.cos(angle) * radius}%;
          top: ${50 + Math.sin(angle) * radius}%;
        `;
        
        fragment.appendChild(particle);
        
        particle.animate([
          { opacity: 1, transform: 'scale(1)' },
          { opacity: 0, transform: 'scale(0)' },
        ], animationOptions).onfinish = () => particle.remove();
      });
      
      element.appendChild(fragment);
    }
  });
</script>
