---
/* 
  Propiedades del componente y tipado. 
  Se reciben: id, nombre y clase extra (extraClass)
*/
const { id, name, class: extraClass } = Astro.props;

interface Props {
  id: string;
  name: string;
  class: string;
}
---

<!-- Tarjeta del boxeador -->
<a
  class={`boxer-card ${extraClass} inline-block transition-all w-10 sm:w-14 md:w-16 lg:w-24 xl:w-26 group relative rounded-lg duration-300 hover:scale-110 hover:shadow-lg hover:z-20`}
  href={`/luchador/${id}`}
  data-id={id}
>
  <div class="relative overflow-hidden rounded-lg">
    <!-- Sprite del luchador -->
    <div 
      class="fighter-sprite aspect-[900/1200] h-full w-full bg-gradient-to-t from-gray-50/40 via-gray-50/20 via-40 to-transparent transition-transform duration-500 group-hover:scale-110"
      data-fighter={id}
      role="img"
      aria-label={`Tarjeta del boxeador ${name}`}
    ></div>

    <!-- Efecto de barrido -->
    <div 
      class="absolute inset-0 -translate-x-full bg-gradient-to-tr from-transparent via-white/20 to-transparent transition-transform duration-700 ease-in-out group-hover:translate-x-full">
    </div>

    <!-- Borde animado -->
    <div 
      class="border-theme-tickle-me-pink/70 absolute inset-0 rounded-lg border-0 opacity-0 transition-all duration-300 group-hover:border-2 group-hover:opacity-100">
    </div>
  </div>

  <!-- Detalle textual, aparece al interactuar -->
  <div 
    class="absolute inset-0 flex translate-y-2 flex-col items-center justify-end rounded-lg bg-gradient-to-t from-pink-950/90 via-pink-950/40 to-transparent p-2 opacity-0 transition-all duration-300 group-hover:translate-y-0 group-hover:opacity-100">
    <h3 
      class="text-theme-tickle-me-pink text-xs font-semibold tracking-wide drop-shadow-[0_1px_2px_rgba(0,0,0,0.8)]"
    >
      {name}
    </h3>
  </div>

  <!-- Barra inferior animada -->
  <div 
    class="bg-theme-tickle-me-pink absolute -bottom-1 left-1/2 h-1 w-0 -translate-x-1/2 transform rounded-t-md transition-all duration-300 group-hover:w-2/3"
  >
  </div>
</a>

<style>
  .boxer-left { transform: skew(2deg); }
  .boxer-right { transform: skew(-2deg); }
  .fighter-sprite {
    background-image: url('/images/fighters/cards/fighters-sheet.webp');
    background-repeat: no-repeat;
    background-size: 1400% 100%;
    position: relative;
    background-position: calc(var(--fighter-index, 0) / 13 * 100%) 0;
  }
  .sprite-error {
    background-image: var(--fallback-url) !important;
    background-size: cover !important;
    background-position: center !important;
  }
  .fighter-sprite[data-fighter="abby"] { --fighter-index: 0; }
  .fighter-sprite[data-fighter="alana"] { --fighter-index: 1; }
  .fighter-sprite[data-fighter="andoni"] { --fighter-index: 2; }
  .fighter-sprite[data-fighter="arigeli"] { --fighter-index: 3; }
  .fighter-sprite[data-fighter="carlos"] { --fighter-index: 4; }
  .fighter-sprite[data-fighter="gaspi"] { --fighter-index: 5; }
  .fighter-sprite[data-fighter="grefg"] { --fighter-index: 6; }
  .fighter-sprite[data-fighter="peereira"] { --fighter-index: 7; }
  .fighter-sprite[data-fighter="perxitaa"] { --fighter-index: 8; }
  .fighter-sprite[data-fighter="rivaldios"] { --fighter-index: 9; }
  .fighter-sprite[data-fighter="roro"] { --fighter-index: 10; }
  .fighter-sprite[data-fighter="tomas"] { --fighter-index: 11; }
  .fighter-sprite[data-fighter="viruzz"] { --fighter-index: 12; }
  .fighter-sprite[data-fighter="westcol"] { --fighter-index: 13; }

  @media (prefers-reduced-motion) {
    .boxer-card,
    .boxer-card:hover,
    .boxer-card img,
    .boxer-card div {
      transition: opacity 0.3s ease !important;
      transform: none !important;
    }
  }

  @keyframes pulseBorder {
    0% { box-shadow: 0 0 0 0 rgba(255, 20, 147, 0.7); }
    70% { box-shadow: 0 0 0 10px rgba(255, 20, 147, 0); }
    100% { box-shadow: 0 0 0 0 rgba(255, 20, 147, 0); }
  }
  @keyframes selectedPulse {
    0% { box-shadow: 0 0 0 0 rgba(255, 20, 147, 0.7), inset 0 0 0 2px rgba(255, 20, 147, 1); }
    70% { box-shadow: 0 0 0 15px rgba(255, 20, 147, 0), inset 0 0 0 2px rgba(255, 20, 147, 1); }
    100% { box-shadow: 0 0 0 0 rgba(255, 20, 147, 0), inset 0 0 0 2px rgba(255, 20, 147, 1); }
  }
  .boxer-card.selected {
    animation: selectedPulse 2s infinite cubic-bezier(0.66, 0, 0, 1);
  }
  @media (prefers-reduced-motion) {
    .boxer-card.selected {
      animation: none;
      box-shadow: inset 0 0 0 2px rgba(255, 20, 147, 1);
    }
  }
</style>

<script>
  import { FIGHTERS } from '@/consts/fighters';

  type FighterId = typeof FIGHTERS[number]['id'];

  const CONFIG = {
    classes: {
      selected: 'selected',
      spriteError: 'sprite-error',
      grayscale: 'grayscale-100',
      opacity: 'opacity-40',
    },
    timing: {
      hoverExitDelay: 500,
      clickDelay: 600,
      particleThrottle: 300,
    },
    particles: {
      count: 10,
      duration: 1000,
      baseRadius: 50,
      varianceRadius: 20,
    },
    selectors: {
      card: '.boxer-card',
      sprite: '.fighter-sprite',
    },
    paths: {
      spriteSheet: '/images/fighters/cards/fighters-sheet.webp',
      fallbackTemplate: (id) => `/images/fighters/cards/${id}.webp`,
    },
  };

  const versusMap = Object.freeze(new Map(FIGHTERS.flatMap(f => f.versus ? [[f.id, f.versus], [f.versus, f.id]] : [])));

  const state = {
    lastParticleTime: 0,
    hoverTimeoutId: null,
  };

  function createParticles(el) {
    const now = Date.now();
    if (now - state.lastParticleTime < CONFIG.timing.particleThrottle) return;
    state.lastParticleTime = now;

    const fragment = document.createDocumentFragment();
    for (let i = 0; i < CONFIG.particles.count; i++) {
      const p = document.createElement('div');
      p.className = 'absolute w-1 h-1 bg-theme-tickle-me-pink rounded-full';
      const angle = Math.random() * Math.PI * 2;
      const radius = CONFIG.particles.baseRadius + Math.random() * CONFIG.particles.varianceRadius;
      p.style.cssText = `left: ${50 + Math.cos(angle) * radius}%; top: ${50 + Math.sin(angle) * radius}%; pointer-events: none;`;
      p.animate([
        { opacity: 1, transform: 'scale(1)' },
        { opacity: 0, transform: 'scale(0)' },
      ], { duration: CONFIG.particles.duration, easing: 'ease-out', fill: 'forwards' }).onfinish = () => p.remove();
      fragment.appendChild(p);
    }
    el.appendChild(fragment);
  }

  function initSpriteFallback() {
    const img = new Image();
    img.onerror = () => {
      document.querySelectorAll(CONFIG.selectors.sprite).forEach(sprite => {
        const id = sprite.dataset.fighter;
        if (!id) return;
        sprite.classList.add(CONFIG.classes.spriteError);
        sprite.style.setProperty('--fallback-url', `url('${CONFIG.paths.fallbackTemplate(id)}')`);
      });
    };
    img.src = CONFIG.paths.spriteSheet;
  }

  function updateCardStyles(cards, currentId, opponentId) {
    requestAnimationFrame(() => {
      cards.forEach(card => {
        const cardId = card.dataset.id;
        const isRelevant = !currentId || cardId === currentId || cardId === opponentId;
        card.classList.toggle(CONFIG.classes.grayscale, !isRelevant);
        card.classList.toggle(CONFIG.classes.opacity, !isRelevant);
      });
    });
  }

  document.addEventListener('astro:page-load', () => {
    initSpriteFallback();
    const allCards = Array.from(document.querySelectorAll(CONFIG.selectors.card));

    allCards.forEach(card => {
      const id = card.dataset.id;
      if (!id) return;

      const handleEnter = () => {
        if (state.hoverTimeoutId) clearTimeout(state.hoverTimeoutId);
        state.hoverTimeoutId = null;
        const opponentId = versusMap.get(id);
        document.dispatchEvent(new CustomEvent('boxer-card-hovered', { detail: { id, versus: opponentId } }));
        updateCardStyles(allCards, id, opponentId);
        createParticles(card);
      };

      const handleLeave = () => {
        state.hoverTimeoutId = setTimeout(() => {
          document.dispatchEvent(new CustomEvent('boxer-card-exit'));
          updateCardStyles(allCards, null);
        }, CONFIG.timing.hoverExitDelay);
      };

      const handleClick = (e) => {
        e.preventDefault();
        requestAnimationFrame(() => {
          allCards.forEach(c => c.classList.remove(CONFIG.classes.selected));
          card.classList.add(CONFIG.classes.selected);
        });
        createParticles(card);
        const href = card.getAttribute('href');
        if (href) {
          setTimeout(() => { window.location.href = href; }, CONFIG.timing.clickDelay);
        }
      };

      card.addEventListener('mouseenter', handleEnter, { passive: true });
      card.addEventListener('focusin', handleEnter, { passive: true });
      card.addEventListener('mouseleave', handleLeave, { passive: true });
      card.addEventListener('focusout', handleLeave, { passive: true });
      card.addEventListener('click', handleClick);
    });
  });
</script>